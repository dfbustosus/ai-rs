//! src/models.rs
//!
//! This module defines the core data structures for the application.
//! It specifies the schema for both the input applicant profiles and the
//! structured output from the risk assessment engine, ensuring type safety
//! and data integrity throughout the system.

use serde::{Deserialize, Serialize};
use validator::Validate;

// --- Input Data Model ---

/// Represents the structured profile of a loan applicant.
///
/// This struct now derives `Serialize` so it can be converted to a JSON string.
#[derive(Serialize, Deserialize, Debug, Validate)]
pub struct ApplicantProfile {
    #[serde(rename = "applicantId")]
    #[validate(length(min = 1))]
    pub applicant_id: String,

    #[validate(range(min = 18, max = 120))]
    pub age: u32,

    #[validate(range(min = 0))]
    #[serde(rename = "monthlyIncome")]
    pub monthly_income: u32,

    #[validate(range(min = 0))]
    #[serde(rename = "monthlyDebt")]
    pub monthly_debt: u32,

    #[validate(length(min = 1))]
    #[serde(rename = "employmentStatus")]
    pub employment_status: String,

    #[validate(range(min = 0))]
    #[serde(rename = "yearsInCurrentJob")]
    pub years_in_current_job: u32,

    #[validate(range(min = 300, max = 850))]
    #[serde(rename = "creditScore")]
    pub credit_score: u32,

    #[validate(range(min = 1))]
    #[serde(rename = "loanAmount")]
    pub loan_amount: u32,

    #[validate(length(min = 1))]
    #[serde(rename = "loanPurpose")]
    pub loan_purpose: String,

    #[serde(rename = "hasPreviousDefaults")]
    pub has_previous_defaults: bool,
    
    #[serde(rename = "additionalNotes")]
    pub additional_notes: Option<String>,
}

// --- Output Data Model ---

/// Represents the structured risk assessment generated by the AI.
///
/// This is the schema that the AI will be instructed to return, providing a
/// detailed and auditable analysis.
#[derive(Serialize, Deserialize, Debug)]
pub struct RiskAssessment {
    #[serde(rename = "riskScore")]
    pub risk_score: u32, // A score from 1 (lowest risk) to 10 (highest risk).

    pub recommendation: Recommendation,

    #[serde(rename = "positiveFactors")]
    pub positive_factors: Vec<String>, // A list of strengths in the applicant's profile.

    #[serde(rename = "negativeFactors")]
    pub negative_factors: Vec<String>, // A list of weaknesses or concerns.

    #[serde(rename = "detailedRationale")]
    pub detailed_rationale: String, // A prose explanation of the final recommendation.
}

/// Defines the possible recommendations from the assessment.
#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Recommendation {
    Approve,
    Deny,
    ManualReview,
}
